"""
Phi√™n b·∫£n n√¢ng c·∫•p chuy√™n s√¢u cho trader gi·ªØ l·ªánh 1‚Äì6 gi·ªù.

T√≠nh nƒÉng ch√≠nh:
‚úÖ TP/SL th√¥ng minh theo swing
‚úÖ Ki·ªÉm tra RR ‚â• 1.5 v√† SL kh√¥ng qu√° h·∫πp
‚úÖ Volume spike x√°c nh·∫≠n t√≠n hi·ªáu
‚úÖ X√°c nh·∫≠n ƒëa chi·ªÅu RSI/EMA/MACD/ADX/Bollinger
‚úÖ Lo·∫°i b·ªè t√≠n hi·ªáu sideway (choppy filter)
‚úÖ M√¥ h√¨nh gi√°: Flag, Wedge, Head & Shoulders (d·∫°ng ƒë∆°n gi·∫£n)
‚úÖ Entry h·ª£p l·ªá n·∫øu n·∫±m trong v√πng Fibonacci retracement (0.5‚Äì0.618)
"""

import requests
import pandas as pd
import numpy as np
import time
import datetime
import json
import os
import logging
import gspread
from oauth2client.service_account import ServiceAccountCredentials
from pytz import timezone
import pytz

logger = logging.getLogger()
logger.setLevel(logging.INFO)  # lu√¥n b·∫≠t DEBUG/INFO
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")

# ========== C·∫§U H√åNH ==========
TELEGRAM_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
TELEGRAM_CHAT_ID = os.getenv("TELEGRAM_CHAT_ID")
SHEET_CSV_URL = os.getenv("SHEET_CSV_URL")  # ƒê·∫∑t l·∫°i bi·∫øn n·∫øu ch∆∞a c√≥
# C·∫•u h√¨nh scope
scope = ['https://www.googleapis.com/auth/spreadsheets', 'https://www.googleapis.com/auth/drive']

# ƒê·ªçc file JSON credentials ƒë√£ upload l√™n Render (t√™n ph·∫£i l√† service_account.json)
creds = ServiceAccountCredentials.from_json_keyfile_name('/etc/secrets/service_account.json', scope)

# Authorize gspread
client = gspread.authorize(creds)

# K·∫øt n·ªëi ƒë·∫øn file Google Sheet
# ‚úÖ Th√™m 2 d√≤ng debug n√†y v√†o ngay sau khi t√°ch sheet_id
try:
    sheet_id = SHEET_CSV_URL.split("/d/")[1].split("/")[0]
    print(f"[DEBUG] sheet_id = {sheet_id}")
    sheet = client.open_by_key(sheet_id).worksheet("DATA_FUTURE")
    print("[DEBUG] ƒê√£ m·ªü sheet th√†nh c√¥ng.")
except Exception as e:
    print(f"[ERROR] Kh√¥ng m·ªü ƒë∆∞·ª£c sheet: {e}")
    raise

# ========== THAM S·ªê K·ª∏ THU·∫¨T ==========
TP_MULTIPLIER = 1.5
SL_MULTIPLIER = 1.0
ADX_THRESHOLD = 15
COINS_LIMIT = 200  # S·ªë coin ph√¢n t√≠ch m·ªói l∆∞·ª£t



def rate_signal_strength(entry, sl, tp, short_trend, mid_trend):
    strength = 1
    if abs(tp - entry) / entry > 0.03:
        strength += 1
    if abs(entry - sl) / entry > 0.03:
        strength += 1
    if short_trend == mid_trend:
        strength += 1
    return "‚≠êÔ∏è" * min(strength, 5)


def fetch_ohlcv_okx(symbol: str, timeframe: str = "15m", limit: int = 100):
    try:
        timeframe_map = {
            '1h': '1H', '4h': '4H', '1d': '1D',
            '15m': '15m', '5m': '5m', '1m': '1m'
        }
        timeframe_input = timeframe
        timeframe = timeframe_map.get(timeframe.lower(), timeframe)
        logging.debug(f"üïí Timeframe input: {timeframe_input} => OKX d√πng: {timeframe}")

        if timeframe not in ["1m", "5m", "15m", "30m", "1H", "4H", "1D"]:
            logging.warning(f"‚ö†Ô∏è Timeframe kh√¥ng h·ª£p l·ªá: {timeframe}")
            return None

        url = f"https://www.okx.com/api/v5/market/candles?instId={symbol}&bar={timeframe}&limit={limit}"
        logging.debug(f"üì§ G·ª≠i request n·∫øn OKX: instId={symbol}, bar={timeframe}, limit={limit}")
        response = requests.get(url)
        data = response.json()
        logging.debug(f"üì• K·∫øt qu·∫£ tr·∫£ v·ªÅ t·ª´ OKX: status={response.status_code}, json={data}")

        if 'data' not in data or not data['data']:
            logging.warning(f"‚ö†Ô∏è Kh√¥ng c√≥ d·ªØ li·ªáu OHLCV: instId={symbol}, bar={timeframe}")
            return None

        df = pd.DataFrame(data["data"])
        df.columns = ["ts", "open", "high", "low", "close", "volume", "volCcy", "volCcyQuote", "confirm"]
        df["ts"] = pd.to_datetime(df["ts"].astype(int), unit="ms")  # ‚úÖ an to√†n h∆°n
        df = df.iloc[::-1].copy()

        # ‚úÖ Chuy·ªÉn c√°c c·ªôt s·ªë sang float ƒë·ªÉ tr√°nh l·ªói to√°n h·ªçc
        for col in ['open', 'high', 'low', 'close', 'volume']:
            df[col] = pd.to_numeric(df[col], errors='coerce')

        return df

    except Exception as e:
        logging.error(f"‚ùå L·ªói khi fetch ohlcv OKX cho {symbol} [{timeframe_input}]: {e}")
        return None

def calculate_indicators(df):
    df["close"] = pd.to_numeric(df["close"], errors="coerce")
    df["ema20"] = df["close"].ewm(span=20).mean()
    df["ema50"] = df["close"].ewm(span=50).mean()
    df["ema100"] = df["close"].ewm(span=100).mean()

    # RSI
    delta = df["close"].diff()
    gain = np.where(delta > 0, delta, 0)
    loss = np.where(delta < 0, -delta, 0)
    avg_gain = pd.Series(gain).rolling(window=14).mean()
    avg_loss = pd.Series(loss).rolling(window=14).mean()
    rs = avg_gain / avg_loss
    df["rsi"] = 100 - (100 / (1 + rs))

    # MACD
    exp1 = df["close"].ewm(span=12).mean()
    exp2 = df["close"].ewm(span=26).mean()
    df["macd"] = exp1 - exp2
    df["macd_signal"] = df["macd"].ewm(span=9).mean()

    df = calculate_adx(df)
    return df


def calculate_adx(df, period=14):
    high = pd.to_numeric(df["high"], errors="coerce")
    low = pd.to_numeric(df["low"], errors="coerce")
    close = pd.to_numeric(df["close"], errors="coerce")

    plus_dm = high.diff()
    minus_dm = low.diff()
    plus_dm[plus_dm < 0] = 0
    minus_dm[minus_dm > 0] = 0
    minus_dm = abs(minus_dm)

    tr1 = high - low
    tr2 = abs(high - close.shift())
    tr3 = abs(low - close.shift())
    tr = pd.concat([tr1, tr2, tr3], axis=1).max(axis=1)

    atr = tr.rolling(window=period).mean()
    plus_di = 100 * (plus_dm.rolling(window=period).mean() / atr)
    minus_di = 100 * (minus_dm.rolling(window=period).mean() / atr)
    dx = (abs(plus_di - minus_di) / (plus_di + minus_di)) * 100
    adx = dx.rolling(window=period).mean()

    df["adx"] = adx
    return df
    

def detect_signal(df_15m: pd.DataFrame, df_1h: pd.DataFrame, symbol: str):
    import logging

    df = df_15m.copy()
    df["ema20"] = df["close"].ewm(span=20).mean()
    df["ema50"] = df["close"].ewm(span=50).mean()

    delta = df["close"].diff()
    gain = np.where(delta > 0, delta, 0)
    loss = np.where(delta < 0, -delta, 0)
    avg_gain = pd.Series(gain).rolling(window=14).mean()
    avg_loss = pd.Series(loss).rolling(window=14).mean()
    rs = avg_gain / avg_loss
    df["rsi"] = 100 - (100 / (1 + rs))

    df["macd"] = df["close"].ewm(span=12).mean() - df["close"].ewm(span=26).mean()
    df["macd_signal"] = df["macd"].ewm(span=9).mean()

    df["bb_mid"] = df["close"].rolling(window=20).mean()
    df["bb_std"] = df["close"].rolling(window=20).std()
    df["bb_upper"] = df["bb_mid"] + 2 * df["bb_std"]
    df["bb_lower"] = df["bb_mid"] - 2 * df["bb_std"]

    # ADX
    df = calculate_adx(df)

    latest = df.iloc[-1]
    ema_up = latest["ema20"] > latest["ema50"]
    ema_down = latest["ema20"] < latest["ema50"]
    macd_cross_up = latest["macd"] > latest["macd_signal"]
    macd_cross_down = latest["macd"] < latest["macd_signal"]
    rsi = latest["rsi"]
    adx = latest["adx"]
    close_price = latest["close"]

    # Reversal
    recent = df["close"].iloc[-4:].tolist()
    is_bearish_reversal = all(recent[i] < recent[i-1] for i in range(1, 4)) if len(recent) == 4 else False
    is_bullish_reversal = all(recent[i] > recent[i-1] for i in range(1, 4)) if len(recent) == 4 else False

    # Volume
    vol_now = df["volume"].iloc[-1]
    vol_avg = df["volume"].rolling(20).mean().iloc[-1]
    if vol_now < 1.5 * vol_avg:
        logging.info(f"{symbol}: Volume y·∫øu ‚Üí b·ªè")
        return None, None, None, None, False

    # BB width & ADX choppy filter
    bb_width = (latest["bb_upper"] - latest["bb_lower"]) / latest["close"]
    if adx < 20 and bb_width < 0.015:
        logging.info(f"{symbol}: Sideway (ADX<20 v√† BB width < 1.5%) ‚Üí b·ªè")
        return None, None, None, None, False

    signal = None
    df_recent = df.iloc[-10:]
    if df_recent[["high", "low"]].isnull().any().any():
        return None, None, None, None, False

    entry = latest["close"]
    sl = df_recent["low"].min() if ema_up else df_recent["high"].max()
    tp = df_recent["high"].max() if ema_up else df_recent["low"].min()

    rr = abs(tp - entry) / abs(entry - sl) if (entry - sl) != 0 else 0
    if any(x is None for x in [entry, sl, tp]) or rr < 1.5:
        return None, None, None, None, False

    if (
        rsi > 55 and ema_up and macd_cross_up and adx > 20
        and close_price < latest["bb_upper"]
        and not is_bearish_reversal
        and rr >= 1.5
    ):
        signal = "LONG"
    elif (
        rsi < 45 and ema_down and macd_cross_down and adx > 20
        and close_price > latest["bb_lower"]
        and not is_bullish_reversal
        and rr >= 1.5
    ):
        signal = "SHORT"

    return (signal, entry, sl, tp, True) if signal else (None, None, None, None, False)


def analyze_trend_multi(symbol):
    tf_map = {
        'short': ['1H', '4H', '1D', '1W'],
        'mid':   ['1D', '1W', '1W', '1M']
    }

    def get_score(tf):
        try:
            df = fetch_ohlcv(symbol, tf.lower(), 50)
            df = calculate_indicators(df)
            rsi = df['rsi'].iloc[-1]
            ema20 = df['ema20'].iloc[-1]
            ema50 = df['ema50'].iloc[-1]
            return 2 if (rsi > 60 and ema20 > ema50) else 1 if (rsi > 50 and ema20 > ema50) else 0
        except:
            return 0

    short_score = sum([get_score(tf) for tf in tf_map['short']])
    mid_score = sum([get_score(tf) for tf in tf_map['mid']])

    def to_text(score):
        return "TƒÉng (‚òÖ‚òÖ‚òÖ)" if score >= 6 else "Kh√¥ng r√µ (‚òÖ)" if score >= 2 else "Gi·∫£m (‚úñ)"

    return to_text(short_score), to_text(mid_score)
    

def send_telegram_message(message: str):
    bot_token = os.getenv("TELEGRAM_BOT_TOKEN")  # ho·∫∑c ghi tr·ª±c ti·∫øp chu·ªói token n·∫øu b·∫°n test th·ªß c√¥ng
    chat_id = os.getenv("TELEGRAM_CHAT_ID")      # t∆∞∆°ng t·ª±, g√°n chat_id th·ªß c√¥ng n·∫øu c·∫ßn

    if not bot_token or not chat_id:
        print("‚ùå TELEGRAM_BOT_TOKEN ho·∫∑c TELEGRAM_CHAT_ID ch∆∞a ƒë∆∞·ª£c c·∫•u h√¨nh.")
        return

    url = f"https://api.telegram.org/bot{bot_token}/sendMessage"
    payload = {
        "chat_id": chat_id,
        "text": message,
        "parse_mode": "Markdown"
    }

    try:
        response = requests.post(url, data=payload)
        response.raise_for_status()
        print("‚úÖ ƒê√£ g·ª≠i tin nh·∫Øn Telegram.")
    except Exception as e:
        print(f"‚ùå L·ªói g·ª≠i Telegram: {e}")

def calculate_signal_rating(signal, short_trend, mid_trend, volume_ok):
    if signal == "LONG" and short_trend.startswith("TƒÉng") and mid_trend.startswith("TƒÉng") and volume_ok:
        return 5
    elif signal == "SHORT" and short_trend.startswith("Gi·∫£m") and mid_trend.startswith("Gi·∫£m"):
        return 5
    elif short_trend.startswith("TƒÉng") and mid_trend.startswith("TƒÉng"):
        return 4
    elif short_trend.startswith("Gi·∫£m") and mid_trend.startswith("Gi·∫£m"):
        return 4
    elif signal in ["LONG", "SHORT"]:
        return 3
    else:
        return 2
        
def prepend_to_sheet(row_data: list):
    try:
        old_data = sheet.get_all_values()
        headers = old_data[0]
        body = old_data[1:]
        
        # Ch√®n d√≤ng m·ªõi v√†o ƒë·∫ßu
        body.insert(0, row_data)

        # Ghi l·∫°i to√†n b·ªô (bao g·ªìm c·∫£ header)
        sheet.update([headers] + body)
        logging.info(f"‚úÖ ƒê√£ ghi d√≤ng m·ªõi l√™n ƒë·∫ßu: {row_data[0]}")

    except Exception as e:
        logging.warning(f"‚ùå L·ªói ghi sheet (prepend): {e}")

def run_bot():
    logging.basicConfig(level=logging.INFO)
    coin_list = get_top_usdt_pairs(limit=COINS_LIMIT)

    valid_signals = []
    messages = []
    count = 0

    for symbol in coin_list:
        logging.info(f"üîç Ph√¢n t√≠ch {symbol}...")

        inst_id = symbol.upper().replace("/", "-") + "-SWAP"

        df_15m = fetch_ohlcv_okx(inst_id, "15m")
        df_1h = fetch_ohlcv_okx(inst_id, "1h")

        if df_15m is None or df_1h is None:
            continue

        df_15m = calculate_indicators(df_15m).dropna()
        df_1h = calculate_indicators(df_1h).dropna()
        # ‚úÖ T√≠nh volume hi·ªán t·∫°i v√† trung b√¨nh 20 n·∫øn g·∫ßn nh·∫•t
        try:
            vol_now = df_15m['volume'].iloc[-1]
            vol_avg = df_15m['volume'].rolling(20).mean().iloc[-1]
            volume_ok = vol_now > 0.6 * vol_avg
            logging.debug(f"{symbol}: Volume hi·ªán t·∫°i = {vol_now:.0f}, TB 20 n·∫øn = {vol_avg:.0f}, volume_ok = {volume_ok}")
        except Exception as e:
            logging.warning(f"{symbol}: Kh√¥ng t√≠nh ƒë∆∞·ª£c volume_ok: {e}")
            volume_ok = False

        required_cols = ['ema20', 'ema50', 'rsi', 'macd', 'macd_signal']
        if not all(col in df_15m.columns for col in required_cols):
            logging.warning(f"‚ö†Ô∏è Thi·∫øu c·ªôt trong df_15m: {df_15m.columns}")
            continue

        if df_15m[required_cols].isnull().any().any():
            logging.warning(f"‚ö†Ô∏è C√≥ gi√° tr·ªã null trong df_15m: {df_15m[required_cols].isnull().sum().to_dict()}")
            continue

        signal, entry, sl, tp, volume_ok = detect_signal(df_15m, df_1h, symbol)

        if signal:
            short_trend, mid_trend = analyze_trend_multi(symbol)
            rating = calculate_signal_rating(signal, short_trend, mid_trend, volume_ok)  # ‚≠êÔ∏è‚≠êÔ∏è‚≠êÔ∏è...

            now = datetime.datetime.now(pytz.timezone("Asia/Ho_Chi_Minh")).strftime("%d/%m/%Y %H:%M")
            # üü¢ L∆ØU V√ÄO GOOGLE SHEET n·∫øu rating >= 1
            count += 1
            valid_signals.append([
                symbol,
                signal + " " + ("‚≠êÔ∏è" * rating),
                entry,
                sl,
                tp,
                short_trend,
                mid_trend,
                now
            ])
            
            # üü° G·ª¨I TELEGRAM n·∫øu rating >= 3
            if rating >= 4:
                messages.append(
                    f"{symbol} ({signal}) {entry} ‚Üí TP {tp} / SL {sl} ({'‚≠êÔ∏è' * rating})"
                )
        
        time.sleep(1)
    
    # ‚úÖ G·ª≠i 1 tin nh·∫Øn t·ªïng h·ª£p
    if messages:
        message = "üÜï *T·ªîNG H·ª¢P T√çN HI·ªÜU M·ªöI*\n\n" + "\n".join(messages)
        send_telegram_message(message)

    # ‚úÖ Ghi 1 l·∫ßn duy nh·∫•t v√†o sheet
    if valid_signals:
        try:
            sheet = client.open_by_key(sheet_id).worksheet("DATA_FUTURE")
            for row in valid_signals:
                prepend_to_sheet(row)
            clean_old_rows()
        except Exception as e:
            logging.warning(f"Kh√¥ng th·ªÉ ghi sheet: {e}")
        
    # ‚úÖ Log t·ªïng k·∫øt
    logging.info(f"‚úÖ K·∫æT TH√öC: ƒê√£ ph√¢n t√≠ch {len(coin_list)} coin. C√≥ {count} coin tho·∫£ ƒëi·ªÅu ki·ªán.")
    
def clean_old_rows():
    try:
        data = sheet.get_all_values()
        headers = data[0]
        rows = data[1:]
        today = datetime.datetime.now(pytz.timezone("Asia/Ho_Chi_Minh")).date()

        new_rows = []
        for row in rows:
            try:
                row_date = datetime.datetime.strptime(row[7], "%d/%m/%Y %H:%M").date()
                if (today - row_date).days <= 2:
                    new_rows.append(row)
            except:
                new_rows.append(row)  # N·∫øu l·ªói parse date th√¨ gi·ªØ l·∫°i

        # Ghi l·∫°i: headers + rows m·ªõi
        sheet.update([headers] + new_rows)
        logging.info(f"üßπ ƒê√£ xo√° nh·ªØng d√≤ng qu√° 3 ng√†y (gi·ªØ l·∫°i {len(new_rows)} d√≤ng)")

    except Exception as e:
        logging.warning(f"‚ùå L·ªói khi xo√° d√≤ng c≈©: {e}")

def get_top_usdt_pairs(limit=200):
    url = "https://www.okx.com/api/v5/public/instruments?instType=SPOT"
    try:
        res = requests.get(url)
        data = res.json()['data']
        usdt_pairs = [item['instId'] for item in data if item['quoteCcy'] == 'USDT']
        return usdt_pairs[:limit]
    except Exception as e:
        logging.error(f"L·ªói l·∫•y danh s√°ch coin: {e}")
        return []
if __name__ == "__main__":
    run_bot()


# === G·ª¨I TELEGRAM ===

def send_telegram_message(message):
    try:
        token = TELEGRAM_TOKEN
        chat_id = TELEGRAM_CHAT_ID
        url = f"https://api.telegram.org/bot{token}/sendMessage"
        payload = {
            "chat_id": chat_id,
            "text": message,
            "parse_mode": "HTML"
        }
        response = requests.post(url, data=payload)
        if response.status_code != 200:
            logging.warning(f"Telegram error: {response.text}")
    except Exception as e:
        logging.error(f"‚ùå L·ªói g·ª≠i Telegram: {e}")


# === GHI GOOGLE SHEET ===

def append_to_google_sheet(sheet, row):
    try:
        sheet.append_row(row, value_input_option="USER_ENTERED")
    except Exception as e:
        logging.error(f"‚ùå Kh√¥ng ghi ƒë∆∞·ª£c Google Sheet: {e}")


# === BACKTEST 90 NG√ÄY ===

def backtest_signals_90_days(symbol_list):
    # Gi·∫£ ƒë·ªãnh ƒë√£ c√≥ fetch_ohlcv_okx v√† detect_signal
    today = datetime.datetime.utcnow()
    start_time = today - datetime.timedelta(days=90)
    results = []

    for symbol in symbol_list:
        logging.info(f"üîç Backtest: {symbol}")
        try:
            df = fetch_ohlcv_okx(symbol, "15m", limit=3000)
            if df is None or len(df) < 100:
                continue

            df = calculate_indicators(df)
            for i in range(50, len(df)-20):  # ch·ª´a n·∫øn ƒë·ªÉ ki·ªÉm tra sau
                sub_df = df.iloc[i-50:i].copy()
                df_1h = df.iloc[i-100:i].copy()  # placeholder
                signal, entry, sl, tp, _ = detect_signal(sub_df, df_1h, symbol)
                if signal and entry and sl and tp:
                    future_data = df.iloc[i:i+20]
                    result = "NONE"
                    for j in range(len(future_data)):
                        price = future_data.iloc[j]["high"] if signal == "LONG" else future_data.iloc[j]["low"]
                        if signal == "LONG" and price >= tp:
                            result = "WIN"
                            break
                        elif signal == "LONG" and price <= sl:
                            result = "LOSS"
                            break
                        elif signal == "SHORT" and price <= tp:
                            result = "WIN"
                            break
                        elif signal == "SHORT" and price >= sl:
                            result = "LOSS"
                            break
                    results.append([symbol, signal, entry, sl, tp, result, df.iloc[i]["ts"].strftime("%Y-%m-%d %H:%M")])
        except Exception as e:
            logging.error(f"Backtest l·ªói {symbol}: {e}")
            continue

    # Ghi k·∫øt qu·∫£ ra sheet BACKTEST_RESULT
    try:
        sheet = client.open_by_key(sheet_id).worksheet("BACKTEST_RESULT")
        for row in results:
            sheet.append_row(row, value_input_option="USER_ENTERED")
    except Exception as e:
        logging.error(f"L·ªói ghi BACKTEST_RESULT: {e}")
